
#========== Location Specific Settings ==========#

export QUESTA_HOME      ?= /u/release/2020.2/questasim
export VIS_HOME         ?= /u/release/2020.2/visualizer
export CODELINK_HOME    ?= /project/codelink_qa/codelink_homes/codelink_home_2020.1_ixl
export CATAPULT_HOME    ?= /wv/hlsb/CATAPULT/10.5a/PRODUCTION/aol/Mgc_home

#================================================#

VLOG         = $(QUESTA_HOME)/bin/vlog
VSIM         = $(QUESTA_HOME)/bin/vsim
VLIB         = $(QUESTA_HOME)/bin/vlib
VMAP         = $(QUESTA_HOME)/bin/vmap

VLOG_FLAGS   = +acc=all +incdir+$(HW)
VSIM_FLAGS   = -voptargs=+acc -work work -L rocket_lib
QUIET_FLAG   = --no-print-directory

HW           = ../hw
DESIGNS      = ../designs
TERMINAL     = ../terminal

markers      = ./marker_files
work         = ./work
source_dir   = ../hw

CC           = gcc
CPP          = g++

.EXPORT_ALL_VARIABLES:

all:
	@echo " " 
	@echo " Valid make targets are: " 
	@echo "   make run_fib    - runs a Fibonacci assembly program on the RISC-V CPU  " 
	@echo "   make run_hello  - says 'hello' " 
	@echo "   make run_mac    - runs a simple multiply/accumulate unit generated by Catapult " 
	@echo "   make run_conv   - runs a 2-D convolution in a Catapult accelerator " 
	@echo " "
	@echo "   make clean "
	@echo "   make clean_fib   - cleans fibonacci project "
	@echo "   make clean_hello - cleans hello project "
	@echo "   make clean_mac   - cleans mac project "
	@echo "   make clean_conv  - cleans conv project "
	@echo " "
	@echo " "


compile: work $(markers)                  \
	$(markers)/addr_gen.sv.mark               \
	$(markers)/axi_addr_latch.sv.mark         \
	$(markers)/axi_byte_enables.sv.mark       \
	$(markers)/axi_data_latch.sv.mark         \
	$(markers)/axi_matrix.sv.mark             \
	$(markers)/axi_segment_arbiter.sv.mark    \
	$(markers)/axi_slave_if.sv.mark           \
	$(markers)/axi_slave_segment.sv.mark      \
	$(markers)/bus_fifo.sv.mark               \
	$(markers)/char_in.sv.mark                \
	$(markers)/char_out.sv.mark               \
	$(markers)/mux.sv.mark                    \
	$(markers)/ready_gen.sv.mark              \
	$(markers)/sram.sv.mark                   \
	$(markers)/tbench.sv.mark                 \
	$(markers)/top.sv.mark                    \
	$(markers)/timer.sv.mark                    \
	$(markers)/uart.sv.mark 

sim: rocket_lib compile terminal.so $(TERMINAL)/bin/terminal_emulator 
	@echo "VSIM    tbench"
	@$(VSIM) $(VSIM_FLAGS) tbench -sv_lib terminal >> make.out

rocket_lib: 
	@echo "MAKE    rocket_lib"
	@make -f Makefile.rocket_lib rocket_lib $(QUIET_FLAG) >> make.out

#=== Include project specific makefiles ===#

include *.mk

#=== Questa Run Script ===#

run.do.template:
	@echo "mem load -infile BOOT_CODE -format hex /tbench/t0/rocket_subsystem/bootrom/bootrom_russk" > run.do.template 
	@echo "mem load -filldata 0 /tbench/t0/code_mem/mem " >> run.do.template
	@echo "mem load -infile APP_CODE -format hex /tbench/t0/code_mem/mem" >> run.do.template
	@echo "do wave.do" >> run.do.template
	@echo "run 10 ms" >> run.do.template

#=== Hardware compilation ===#

work: 
	@echo "VLIB    $(work)"
	@$(VLIB) $(work) >> make.out
	@echo "VMAP    work $(work)"
	@$(VMAP) work $(work) >> make.out

$(markers): 
	@mkdir $(markers)

#====== Generic compile rules ======

$(object_dir)/%.o: $(source_dir)/%.cpp
	@echo "GCC     $<"
	@$(GCC) $(CFLAGS) $(INCLUDES) -c -o $@ $< >> make.out

$(markers)/%.sv.mark: $(source_dir)/%.sv
	@echo "VLOG    $<"
	@$(VLOG) $(VLOG_FLAGS) $< >> make.out
	@touch $@

$(markers)/%.v.mark: $(source_dir)/%.v
	@echo "VLOG    $<"
	@$(VLOG) $(VLOG_FLAGS) $< >> make.out
	@touch $@

$(markers)/%.sc.mark: $(source_dir)/%.cpp
	@echo "SCCOM   $<"
	@$(SCCOM) $(SCCOM_FLAGS) $(DEFINES) -D QUESTA -D MATCHLIB -D SC_INCLUDE_MTI_AC -I $(CATAPULT_HOME)/shared/include $< >> make.out
	@touch $@

#=== Clean-up

clean:
	@echo "Removing created files and cruft"
	@rm -rf work $(markers)/* $(markers) transcript vsim.wlf modelsim.ini ibex_core.f trace_core*.log wlf* terminal.so run.do run.do.template make.out

clean_rocket: 
	@make -f Makefile.rocket_lib clean $(QUIET_FLAG)

clean_all: clean clean_rocket clean_fib clean_hello clean_mac clean_conv

#=== Support programs

terminal.so: $(TERMINAL)/dpi/terminal.c 
	@echo "CC      terminal.c"
	@$(CC) -m32 -DVSIM -fPIC -shared -o terminal.so $(TERMINAL)/dpi/terminal.c -I $(QUESTA_HOME)/include -I ./ >> make.out

$(TERMINAL)/bin/terminal_emulator: $(TERMINAL)/dpi/terminal_emulator.c
	@echo "CC      terminal_emulator.c"
	@$(CC) -o $(TERMINAL)/bin/terminal_emulator $(TERMINAL)/dpi/terminal_emulator.c -lpthread >> make.out
